<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProcessManagementAPI</name>
    </assembly>
    <members>
        <member name="T:ProcessManagementAPI.ActionFilters.ModelValidationFilter">
            <summary>
            Model Validation action filter for take all requested action context 
            </summary>
        </member>
        <member name="M:ProcessManagementAPI.ActionFilters.ModelValidationFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            Called asynchronously before the action, after model binding is complete.
            </summary>
            <param name="context">The Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext.</param>
            <param name="next">The Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate. Invoked to execute the next action filter or the action itself.</param>
            <returns>A System.Threading.Tasks.Task that on completion indicates the filter has executed.</returns>       
        </member>
        <member name="M:ProcessManagementAPI.Configurations.SwaggerConfiguration.ConfigureSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Public extension method on IServiceCollection for swagger
            </summary>
            <param name="services">IServiceCollection type parameter</param>
        </member>
        <member name="T:ProcessManagementAPI.Controllers.UserController">
            <summary>
            </summary>
        </member>
        <member name="M:ProcessManagementAPI.Controllers.UserController.#ctor(ProcessManagementAPI.Infrastructure.ServiceFactory)">
            <summary>
            </summary>
            <param name="serviceFactory"></param>
        </member>
        <member name="M:ProcessManagementAPI.Controllers.UserController.Register(ProcessManagement.Common.Models.Inputs.Users.CreateUserInput)">
            <summary>
            Register user
            </summary>
            <param name="createUserInput"></param>
            <returns></returns>
        </member>
        <member name="T:ProcessManagementAPI.Infrastructure.ApplicationMiddleware">
            <summary>
            Application base abstract middleware
            </summary>
        </member>
        <member name="F:ProcessManagementAPI.Infrastructure.ApplicationMiddleware.Next">
            <summary>
            </summary>
        </member>
        <member name="M:ProcessManagementAPI.Infrastructure.ApplicationMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Required constructor with RequestDelegate
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ProcessManagementAPI.Infrastructure.ApplicationMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Write your middleware logic
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:ProcessManagementAPI.Infrastructure.BaseController">
            <summary>
            Base controller for all controllers in application
            </summary>
        </member>
        <member name="F:ProcessManagementAPI.Infrastructure.BaseController.ServiceFactory">
            <summary>
            ServiceFactory instance for get BLL services
            </summary>
        </member>
        <member name="M:ProcessManagementAPI.Infrastructure.BaseController.#ctor(ProcessManagementAPI.Infrastructure.ServiceFactory)">
            <summary>
            All controllers must be use service factory
            </summary>
        </member>
        <member name="M:ProcessManagementAPI.Infrastructure.BaseController.Ok">
            <summary>
            Base success response
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProcessManagementAPI.Infrastructure.BaseController.Ok(System.Object)">
            <summary>
            Success response with result
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ProcessManagementAPI.Infrastructure.BaseController.Ok(System.String)">
            <summary>
            Success response with message
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:ProcessManagementAPI.Infrastructure.ServiceFactory">
            <summary>
            Get BLL services
            </summary>
        </member>
        <member name="M:ProcessManagementAPI.Infrastructure.ServiceFactory.#ctor(System.IServiceProvider)">
            <summary>
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="P:ProcessManagementAPI.Infrastructure.ServiceFactory.UserService">
            <summary>
            User service
            </summary>
        </member>
        <member name="P:ProcessManagementAPI.Infrastructure.ServiceFactory.ProcessManagementIdentityService">
            <summary>
            Process management identity service
            </summary>
        </member>
        <member name="T:ProcessManagementAPI.Middlewares.ExceptionHandleMiddleware">
            <summary>
            IMPORTANT!!! Allways set this middleware on the top of middleware pipeline
            Application exception handling middleware
            </summary>
        </member>
        <member name="M:ProcessManagementAPI.Middlewares.ExceptionHandleMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ProcessManagementAPI.Middlewares.ExceptionHandleMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invoke middleware
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:ProcessManagementAPI.Middlewares.SetResponseContentType">
            <summary>
            Middleware for changing response content type to application/json
            </summary>
        </member>
        <member name="M:ProcessManagementAPI.Middlewares.SetResponseContentType.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ProcessManagementAPI.Middlewares.SetResponseContentType.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invoke middleware
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:ProcessManagementAPI.Middlewares.UnauthorizedResponseHandleMiddleware">
            <summary>
            Unauthorized and forbidden requests handling middleware
            Allways set this middleware on the top of UseAuthentication and UseAuthorization middlewares
            </summary>
        </member>
        <member name="M:ProcessManagementAPI.Middlewares.UnauthorizedResponseHandleMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ProcessManagementAPI.Middlewares.UnauthorizedResponseHandleMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:ProcessManagementAPI.Program">
            <summary>
            </summary>
        </member>
        <member name="M:ProcessManagementAPI.Program.Main(System.String[])">
            <summary>
            App main function
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ProcessManagementAPI.Program.CreateHostBuilder(System.String[])">
            <summary>
            Build app host
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:ProcessManagementAPI.Startup">
            <summary>
            Application startup
            </summary>
        </member>
        <member name="M:ProcessManagementAPI.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:ProcessManagementAPI.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure application services
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:ProcessManagementAPI.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configure HTTP request pipeline
            </summary>
            <param name="app"></param>
        </member>
    </members>
</doc>
